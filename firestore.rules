rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the current user is an admin
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true || 
        request.auth.uid == 'oXEuez09HpYpV7Ok6F6dZsJoUIR2'
      );
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow authenticated users to create their own user document during registration
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'createdAt']) &&
        request.resource.data.email == request.auth.token.email;

      // Allow authenticated users to read and update their own document
      allow read, update: if isOwner(userId);

      // Allow admins to read any user document
      allow get: if isAdmin() || isOwner(userId);

      // Disallow deleting user documents from the client-side
      allow delete: if false;
    }

    // Allow admins to list all user documents with pagination
    match /users {
      allow list: if isAdmin() && 
        request.query.limit <= 100; // Limit the number of documents that can be fetched at once
    }

    // Allow admins to read all documents
    match /{document=**} {
      allow read: if isAdmin();
      allow write: if false;
    }
  }
}
